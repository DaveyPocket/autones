#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>

#define dataShift 2
#define dataMask (1 << dataShift)

#define debugPortDMask 0b11110000
#define debugPortBMask 0b00001111

uint8_t button_number;

PROGMEM const uint16_t frames[] = {59,9,985,50,10,34,10,2,8,8,3,36,15,181,7,9,17,9,29,7,17,38,4,7,3,5,3,3,81,26,2,17,31,13,11,5,8,7,5,12,10,3,97,4,5,17,29,10,24,5,19,7,11,19,1,8,15,9,9,71,2,1,97,11,31,9,10,3,6,4,7,3,7,32,136,1,77,5,32,14,42,9,53,7,6,12,99,17,7,3,6,3,6,11,128,14,15,64,10,12,8,16,7,16,9,7,71,28,159,4,3,5,5,5,8,31,12,7,7,7,6,5,4,4,28,32,6,7,74,1,6,6,2,3,4,8,3,3,3,1,80,16,138,17,9,27,8,11,1,10,62,53,18,21,7,109,24,21,24,142,11,24,137,8,35,6,3,8,1,1,10,4,25,8,11,12,45,6,154,11,60,43,23,1,44,2,30,145,13,28,8,426,10,23,10,14,95,41,50,8,32,2,2,10,3,7,2,2,8,47,3,28,2,40,16,28,22,3,7,2,7,2,18,21,37,27,24,15,2,4,6,123,10,203,3,3,6,4,21,16,8,174,7,16,7,24,42,82,2,7,2,7,7,8,1,79,1,21,2,8,3,7,2,9,6,8,4,6,1,63,1,7,3,6,4,39,4,7,3,4,5,4,5,7,5,2,3,6,4,8,19,9,6,10,13,20,9,10,19,17,7,11,6,10,9,16,1,9,4,5,4,56,12,27,196,106,5,1,5,6,5,13,3,12,2,11,234,228,23,8,6,14,2,9,11,24,27,23,0};

PROGMEM const uint8_t buttons[] = {0,8,0,128,129,128,130,128,0,2,0,128,129,128,0,2,0,2,0,128,129,128,0,64,66,2,0,144,128,0,128,129,128,0,2,0,64,2,0,128,2,0,128,130,2,0,128,0,128,0,64,2,0,128,130,2,0,2,0,64,16,0,128,129,128,0,2,0,2,0,2,0,2,0,128,144,16,144,128,129,128,0,32,0,2,0,32,0,2,0,64,66,2,0,128,129,128,0,2,0,2,0,2,0,2,0,128,129,128,130,2,0,2,0,2,0,1,0,2,0,2,0,2,66,64,65,64,0,128,0,64,66,2,0,2,0,2,0,2,130,128,129,128,0,128,0,64,65,1,0,128,0,64,0,128,0,128,129,128,0,128,129,128,0,64,0,128,130,2,0,2,0,128,0,64,66,64,0,128,129,128,129,128,160,32,160,128,0,2,0,2,0,2,0,2,0,128,0,128,0,64,0,128,129,0,2,66,64,66,64,96,32,160,128,144,128,129,128,130,128,130,128,0,128,129,128,0,2,0,32,34,32,0,128,130,2,0,2,0,64,0,128,0,64,0,128,129,128,0,64,65,1,0,2,130,128,0,64,0,128,129,1,0,2,0,2,0,2,130,128,130,2,0,2,0,128,129,1,0,2,130,128,0,64,66,2,0,2,0,2,0,2,0,2,0,128,0,64,0,128,0,128,0,64,0,128,0,2,0,1,65,64,0,128,0,128,129,1,3,2,0,1,0,2,0,1,0,128,129,131,130,128,160,32,160,128,0,1,0};

uint16_t movie_size = sizeof(buttons);
uint16_t index = 0;

uint16_t frame = frames[0];
uint8_t button = ~(buttons[0]);

int main(void) {
  DDRB |= debugPortBMask;
  DDRD |= debugPortDMask;
  DDRC |= 0b00000100; // pinMode(A2, OUTPUT)
  EICRA = 0b00001111; // INT0,INT1 RISING
  EIMSK = 0b00000011; // Enable INT0, INT1
  PORTC |= dataMask;  // digitalWrite(A2, HIGH)
  sei(); // enable interrupts

  while(1){ };
  return 1;
}

// latch
ISR(INT0_vect) {
  button_number = 0;
  if(frame == 0 && index < movie_size - 1){
    index++;
    //frame = frames[index];
    frame = pgm_read_word_near(frames + index);
  }
  //button = ~(buttons[index]);
  button = ~(pgm_read_byte_near(buttons + index));
  PORTD = (PORTD & ~debugPortDMask) | (~button & debugPortDMask);
  PORTB = (PORTB & ~debugPortBMask) | (~button & debugPortBMask);
  PORTC = (PORTC & ~dataMask) | ((button & 1) << dataShift);
  frame--;
}

// clock
ISR(INT1_vect) {
  button_number++;
  button >>= 1;
  if(button_number < 8){
    PORTC = (PORTC & ~dataMask) | ((button & 1) << dataShift);	
  } else {
    PORTC = (PORTC & ~dataMask) | (1 << dataShift);	
  }

}
